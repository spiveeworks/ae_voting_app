
contract ADT_Test =
  datatype adt = NoInts | OneInt(int) | TwoInts(int, int) | ManyInts(map(int, int))
  type aliased('a) = ('a * 'a)
  record rec = {x : list(adt), y : aliased(int)}

  type state = option(int)

  entrypoint init(x: rec) : option(int) = None

  entrypoint method(x : option(int), y : rec): int =
    let (z, _) = y.y
    z

  entrypoint method2(x: adt): int =
    let y = switch (x)
      NoInts => 0
      OneInt(y) => y
      TwoInts(y, z) => y + z
      ManyInts(xs) => xs[0]
    y + 1
